{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OOIP for Controls and Automation Engineers","text":"<p>Welcome to Object-Oriented Industrial Programming (OOIP) examples and docs.</p> <p>This repository was created to store and make available all of the PLC programming examples posted via my LinkedIn account.  It demonstrates how to apply OOP principles and design patterns in CODESYS using IEC 61131-3 languages (primarily structured text).</p> <p>Note: This project has no official affiliation with the CODESYS Group \u2014 just a practical guide offering an alternative approach to controls software development.</p> <p>\u2699\ufe0f Built and maintained by Jacob Lawson</p>"},{"location":"#project-goals","title":"Project Goals","text":"<p>\u2705 Provide practical examples of OOIP principles using CODESYS</p> <p>\u2705 Demonstrate sclable design patterns for industrial controls projects</p> <p>\u2705 Share best practices and reusability tips for PLC projects</p> <p>\u2705 Create a structured and open knowledge base for eduactional and reference purposes</p>"},{"location":"#who-this-is-for","title":"Who This Is For","text":"<ul> <li>Controls engineers transitioning to Structured Text and OO programming</li> <li>Software developers collaborating with PLC/ Controls teams</li> <li>Teams aiming to modernise architectures in a clean and maintainable way</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>A basic level of programming and automation knowledge is assumed. </p> <p>Examples are built using Codesys v3.5 SP20 Patch 1 so it is recommended that you install this version (or later) in order to follow along with these examples.</p> <p>The Codesys IDE is available for free at the Codesys Store.</p>"},{"location":"#how-to-use-this-site","title":"How to Use This Site","text":"<p>Start with the Features section to learn about individual OO features, then explore Patterns to see how you can start putting them into practice.</p>"},{"location":"#using-an-example-project","title":"Using an example project","text":"<p>All examples are exported in .export format.</p> <p>To import one of the examples:</p> <p>--&gt; Create a new standard project in CODESYS</p> <p>--&gt; Highlight the application level in the device tree</p> <p>--&gt; Go to the Project drop-down menu</p> <p>--&gt; Select Import</p> <p>--&gt; Navigate to the .export file and select the files you want to insert</p> <p></p>"},{"location":"#want-to-contribute","title":"Want to contribute?","text":"<p>Contributions are welcome! (soon) Feel free to get in touch and discuss how you can contribute your own examples or suggest inprovements to the project.</p> <p>I'm hoping to create an examples section where people can share ther projects/ libraries with the rest of the controls/automation community.  If you have something you'd like to add just let me know!</p>"},{"location":"#repo-structure","title":"Repo Structure","text":""},{"location":"features/FunctionBlocks/","title":"Function Blocks","text":"<p>Function blocks are the core building blocks of object-oriented programming in IEC 61131-3.  They behave in a similar way to classes in other modern object-oriented programming languages like C# and Python.  You can use function blocks to encapsulate both data (variables) and behavior (methods), making them perfect for creating clean and scalable logic.</p>"},{"location":"features/FunctionBlocks/#purpose","title":"Purpose","text":"<p>Function blocks can be used to model components commonly used in industrial automation such as: - Motors - Valves - Temperature Controllers - Communication Modules</p> <p>Function blocks allow you to reuse your code in scenarios where you have multiple instances of the same object.</p> <p>Each instance of a function block maintains its own internal state.</p>"},{"location":"features/FunctionBlocks/#key-features-settings","title":"Key Features/ Settings","text":"<ul> <li>Access specifier</li> <li>Extends</li> <li>Implements</li> <li>Final</li> <li>Abstract</li> <li>Methods</li> <li>Properties</li> </ul>"},{"location":"features/FunctionBlocks/#how-to","title":"How to","text":""},{"location":"features/FunctionBlocks/#adding-a-new-function-block","title":"Adding a new function block","text":"<p>To add a function block to your project:</p> <p>--&gt; Right click Application (device tree)</p> <p>--&gt; Add Object </p> <p>--&gt; POU...</p> <p></p>"},{"location":"features/FunctionBlocks/#configuring-a-function-block","title":"Configuring a function block","text":"<p>You will see the POU selection and configuration window appear (Add POU).</p> <p>Firstly, select the Funtion block radio button.</p> <p>You are presented with a few different options most of which we will cover in future examples but you should notice that only the function block type gives you access to these additional features:</p> <p>Extends - This allows to you specify a parent function block (see inheritance example)</p> <p>Implements - This allows you to specify an interface to be implemented by this function block (see interface example)</p> <p>Final - Prevents the function block from being extended or sub-classed (see inheritance example)</p> <p>Abstract - Prevents the function block from being instantiated directly (see inheritance example)</p> <p>The access specifier dictates how visible your function block will be to the rest of your project. For now, just set this to PUBLIC. </p> <p>INTERNAL can be useful for library development and restriciting which function blocks are exposed to the rest of the project.</p> <p></p> <p>You can choose to implement your function block using </p>"},{"location":"features/FunctionBlocks/#example","title":"Example","text":"<p>Clone and check out the project in the examples folder!</p>"},{"location":"features/Interfaces/","title":"Interfaces","text":"<p>Interfaces define a contract - a set of methods and properties that a Function Block or Class must implement. They are a powerful tool for writing modular, testable, and extensible code.</p> <p>Unlike Function Blocks, interfaces do not hold state or contain implementation logic. Instead, they define the shape of a component, making your software easier to extend and maintain.</p>"},{"location":"features/Interfaces/#purpose","title":"Purpose","text":"<p>Interfaces are ideal when you want to define common behaviour across different types of objects, without enforcing a specific implementation.</p> <p>Use interfaces to:</p> <ul> <li> <p>Decouple logic from specific implementations</p> </li> <li> <p>Enable polymorphism (e.g. multiple FBs implementing the same interface)</p> </li> <li> <p>Simplify unit testing via mocking/stubbing</p> </li> <li> <p>Simplify scaling and the addition of new components/ variations</p> </li> </ul> <p>For example, if you have different motor variations, they could all implement a common IMotor interface with methods like Start(), Stop(), and a property like IsRunning.</p>"},{"location":"features/Interfaces/#key-concepts","title":"Key Concepts","text":"<p>Interface: A named contract that defines methods and/or properties to be implemented.</p> <p>Implements: A keyword used to declare that a Function Block or Class adheres to a specific interface.</p> <p>Polymorphism: The ability to use objects of different types interchangeably via a common interface.</p>"},{"location":"features/Interfaces/#how-to","title":"How-To","text":""},{"location":"features/Interfaces/#adding-a-new-interface","title":"Adding a new interface","text":"<p>To add an interface to your project:</p> <p>--&gt; Right-click Application (in the device tree)</p> <p>--&gt; Click Add Object</p> <p>--&gt; Select Interface</p> <p></p>"},{"location":"features/Interfaces/#defining-an-interface","title":"Defining an interface","text":"<p>You will now see an editor where you can define your interface members:</p> <p>Methods (without implementation)</p> <p>Properties (optional)</p>"},{"location":"features/Interfaces/#implementing-an-interface","title":"Implementing an Interface","text":"<p>To implement an interface in a Function Block you use the keyword IMPLEMENTS followed by the name of the function block.</p> <p>You can let the CODESYS IDE implement add the interface components by right clicking and selecting implement interfaces...</p> <p></p>"},{"location":"features/Interfaces/#tips","title":"Tips","text":"<p>Interfaces can only contain method/property signatures, no logic.</p> <p>You can implement multiple interfaces in one Function Block.</p> <p>Use interfaces to pass abstract dependencies into higher-level components.</p>"},{"location":"features/Interfaces/#example","title":"Example","text":"<p>Clone and check out the project in examples folder!</p>"},{"location":"features/Methods/","title":"Methods","text":"<p>Methods are reusable, encapsulated pieces of logic that belong to a Function Block or Class. They're like functions, but scoped to a specific object instance - letting you operate on that FB\u2019s internal state.</p> <p>This is a big step toward writing modular, readable, and maintainable code.</p>"},{"location":"features/Methods/#purpose","title":"Purpose","text":"<p>Methods are useful for:</p> <ul> <li> <p>Hiding internal logic that doesn't need to be exposed outside the Function Block</p> </li> <li> <p>Reusing logic to avoid unnecessary repetition</p> </li> <li> <p>Breaking code into smaller, more readable pieces</p> </li> <li> <p>Making it easier to test individual parts of your program in isolation</p> </li> </ul>"},{"location":"features/Methods/#how-to","title":"How-To","text":""},{"location":"features/Methods/#adding-a-method-to-a-function-block","title":"Adding a method to a function block","text":"<p>To add a method to your function block:</p> <p>--&gt; Right click the function block</p> <p>--&gt; Select Add Object </p> <p>--&gt; Choose POU...</p> <p></p>"},{"location":"features/Methods/#configuring-a-method","title":"Configuring a method","text":"<p>You\u2019ll see the Add Method dialog.</p> <p>Firstly, give your method a clear and meaningful name (or not, your choice...)</p> <p>You then have the option to select a return type. If you only want your method to perform an action and not return a value then you can simply leave this blank.</p> <p>However, if you do want to return something once your method has finished running then speicfy it here.</p> <p>Just like with Function Blocks, you can assign an access specifier to control how the method is exposed:</p> <p>Public - Makes the Function Block, method, or property accessible from anywhere in the application.</p> <p>Private - Restricts access to within the same Function Block or class \u2014 not visible to external code.</p> <p>Protected - Accessible only from within the Function Block and its derived types.</p> <p>Internal - Accessible only within the same library or application scope, but not visible outside it.</p> <p>Access specifiers give us control over how the method can be viewed and interacted with from outside the function block.</p> <p></p> <p>Here\u2019s a screenshot from the example project showing a method being called from another POU. You can see how the return value (a BOOL in this case) is captured after the method completes.</p> <p></p>"},{"location":"features/Methods/#example","title":"Example","text":"<p>Clone and check out the project in the examples folder!</p>"},{"location":"features/Properties/","title":"Properties","text":"<p>Properties are special members of a Function Block or Class that act like variables but with built-in getter and/or setter logic. They let you safely expose or control access to internal state \u2014 without exposing internal variables directly.</p> <p>Think of them like a blend between a variable and a method. You can read or write them like fields, but behind the scenes they can also run logic.</p>"},{"location":"features/Properties/#purpose","title":"Purpose","text":"<p>Properties are useful for:</p> <ul> <li> <p>Providing controlled access to internal variables</p> </li> <li> <p>Filtering and carrying out validation before assigning to a variable</p> </li> <li> <p>Keeping code clean and easy to read</p> </li> <li> <p>Supporting good encapsulation without cluttering the interface</p> </li> </ul>"},{"location":"features/Properties/#how-to","title":"How-To","text":""},{"location":"features/Properties/#adding-a-property-to-a-function-block","title":"Adding a property to a function block","text":"<p>To add a property to your function block:</p> <p>--&gt; Right-click your Function Block</p> <p>--&gt; Select Add Object</p> <p>--&gt; Choose Property</p> <p></p>"},{"location":"features/Properties/#configuring-a-property","title":"Configuring a property","text":"<p>You\u2019ll see the Add Property dialog.</p> <p>Firstly, give your property a clear and meaningful name (or not, your choice...)</p> <p>You then have the option to select a return type. Your property can return a data type of your choosing.</p> <p>Just like with Function Blocks and Methods, you can assign an access specifier to control how the property is exposed:</p> <p>Public - Makes the Function Block, method, or property accessible from anywhere in the application.</p> <p>Private - Restricts access to within the same Function Block or class \u2014 not visible to external code.</p> <p>Protected - Accessible only from within the Function Block and its derived types.</p> <p>Internal - Accessible only within the same library or application scope, but not visible outside it.</p> <p>Access specifiers give us control over how the property can be viewed and interacted with from outside the function block.</p> <p></p> <p>Access to a property can also be restricted by removing the Get or Set Methods. For example, removing the Set method completely will ensure that the property is exposed as READ-ONLY to exerything outside of the function block.</p> <p>Here\u2019s a screenshot from the example project showing a property being accessed via its Get and Set methods. You can see how the return value (a BOOL in this case) is captured after the method completes.</p> <p></p>"},{"location":"features/Properties/#example","title":"Example","text":"<p>Clone and check out the project in the examples folder!</p>"},{"location":"patterns/Command/","title":"Command Pattern","text":"<p>The Command Pattern is a behavioral design pattern that turns requests or actions into standalone objects\u2014commands\u2014that can be queued, logged, or executed later. It\u2019s especially useful in automation when you want to decouple how an action is triggered from how it\u2019s performed.</p> <p>Here is a simple use-case:</p> <p>Imagine an operator needs to schedule a series of maintenance actions via the HMI to be executed the next time the machine reaches a safe state (e.g. during a lunch break).</p> <p>The operator can queue any combination of actions in any order they choose, for example: \u2022 \ud835\uddd6\ud835\uddf9\ud835\uddf2\ud835\uddee\ud835\uddfb \u2022 \ud835\udde3\ud835\ude02\ud835\uddff\ud835\uddf4\ud835\uddf2 \u2022 \ud835\udddc\ud835\uddfb\ud835\ude00\ud835\uddfd\ud835\uddf2\ud835\uddf0\ud835\ude01</p> <p>This is where the \ud835\uddd6\ud835\uddfc\ud835\uddfa\ud835\uddfa\ud835\uddee\ud835\uddfb\ud835\uddf1 \ud835\udde3\ud835\uddee\ud835\ude01\ud835\ude01\ud835\uddf2\ud835\uddff\ud835\uddfb works well. Instead of hardcoding the sequence or relying on tightly-coupled logic, we can:</p> <ol> <li> <p>Define an ICommand interface</p> </li> <li> <p>Build a queue to manage command objects</p> </li> <li> <p>Implement specific command function blocks or classes to encapsulate each action</p> </li> </ol> <p>\u2705 This makes it easy to \ud835\uddfe\ud835\ude02\ud835\uddf2\ud835\ude02\ud835\uddf2, \ud835\uddff\ud835\uddf2\ud835\uddfc\ud835\uddff\ud835\uddf1\ud835\uddf2\ud835\uddff, \ud835\uddee\ud835\uddfb\ud835\uddf1 \ud835\uddf2\ud835\ude05\ud835\uddf2\ud835\uddf0\ud835\ude02\ud835\ude01\ud835\uddf2 commands at the right time. \u2705 Logic becomes \ud835\uddfa\ud835\uddfc\ud835\uddf1\ud835\ude02\ud835\uddf9\ud835\uddee\ud835\uddff \ud835\uddee\ud835\uddfb\ud835\uddf1 \ud835\uddff\ud835\uddf2\ud835\ude02\ud835\ude00\ud835\uddee\ud835\uddef\ud835\uddf9\ud835\uddf2, not tangled inside giant conditionals or state machines (although, I do like a state machine...). \u2705 Testing and scaling is easier allowing you to simulate, validate, and add new commands independently.</p>"},{"location":"patterns/Command/#how-to","title":"How-To","text":""},{"location":"patterns/Command/#1-add-an-interface","title":"1. Add an Interface","text":"<p>First we need to create an interface for our command objects. You can refer back to the Interfaces example if needed. Our interface needs to define an Execute() method as a minimum. We will call the interface ICommand.</p> <p></p>"},{"location":"patterns/Command/#2-create-command-function-blocks","title":"2. Create Command Function Blocks","text":"<p>Next we need a function blocks that encapsulate the different commands that need to be queued. You can refer back to the Function Blocks example if needed. All of our Command Function Blocks must implement the ICommand interface and accept a reference to whichever FB we need to act on. </p> <p></p>"},{"location":"patterns/Command/#3-create-a-queue","title":"3. Create a Queue","text":"<p>Finally, we need a queue that accepts any objects implementing the ICommand interface. By using a common interface we are able to  queue different command objects together.</p> <p></p>"},{"location":"patterns/Command/#example","title":"Example","text":"<p>Clone and check out the project in examples folder!</p>"},{"location":"patterns/DependencyInjection/","title":"Interfaces","text":"<p>Interfaces define a contract - a set of methods and properties that a Function Block or Class must implement. They are a powerful tool for writing modular, testable, and extensible code.</p> <p>Unlike Function Blocks, interfaces do not hold state or contain implementation logic. Instead, they define the shape of a component, making your software easier to extend and maintain.</p>"},{"location":"patterns/DependencyInjection/#purpose","title":"Purpose","text":"<p>Interfaces are ideal when you want to define common behaviour across different types of objects, without enforcing a specific implementation.</p> <p>Use interfaces to:</p> <p>Decouple logic from specific implementations</p> <p>Enable polymorphism (e.g. multiple FBs implementing the same interface)</p> <p>Simplify unit testing via mocking/stubbing</p> <p>Simplify scaling and the addition of new components/ variations</p> <p>For example, if you have different motor variations, they could all implement a common IMotor interface with methods like Start(), Stop(), and a property like IsRunning.</p>"},{"location":"patterns/DependencyInjection/#key-concepts","title":"Key Concepts","text":"<p>Interface: A named contract that defines methods and/or properties to be implemented.</p> <p>Implements: A keyword used to declare that a Function Block or Class adheres to a specific interface.</p> <p>Polymorphism: The ability to use objects of different types interchangeably via a common interface.</p>"},{"location":"patterns/DependencyInjection/#how-to","title":"How-To","text":""},{"location":"patterns/DependencyInjection/#adding-a-new-interface","title":"Adding a new interface","text":"<p>To add an interface to your project:</p> <p>--&gt; Right-click Application (in the device tree)</p> <p>--&gt; Click Add Object</p> <p>--&gt; Select Interface</p> <p></p>"},{"location":"patterns/DependencyInjection/#defining-an-interface","title":"Defining an interface","text":"<p>You will now see an editor where you can define your interface members:</p> <p>Methods (without implementation)</p> <p>Properties (optional)</p>"},{"location":"patterns/DependencyInjection/#implementing-an-interface","title":"Implementing an Interface","text":"<p>To implement an interface in a Function Block you use the keyword IMPLEMENTS followed by the name of the function block.</p> <p>You can let the CODESYS IDE implement add the interface components by right clicking and selecting implement interfaces...</p> <p></p>"},{"location":"patterns/DependencyInjection/#tips","title":"Tips","text":"<p>Interfaces can only contain method/property signatures, no logic.</p> <p>You can implement multiple interfaces in one Function Block.</p> <p>Use interfaces to pass abstract dependencies into higher-level components.</p>"},{"location":"patterns/DependencyInjection/#example","title":"Example","text":"<p>Clone and check out the project in examples folder!</p>"},{"location":"patterns/StateMachine/","title":"State Machine","text":"<p>A state machine is a common design pattern used to manage the states and transitions of a process. Each state defines specific behaviors and transitions based on events or conditions.</p> <p>State machines are especially useful for controlling sequences of events and make it easy to identify the current state of a machine or process during debugging.</p> <p>There are many different ways to implement a state machine. Many engineers choose to use SFC (Sequential Function Chart), which offers a clear, graphical approach. However, in this example, I\u2019ll demonstrate how to implement a state machine using Structured Text (ST).</p> <p>The example counts an integer value (scanCount) that increments by 1 each scan. Once the count reaches (or surpasses 200) the count is reset and the state is changed.</p>"},{"location":"patterns/StateMachine/#purpose","title":"Purpose","text":"<p>State machines help you:</p> <ul> <li> <p>Organise complex logic into clear states</p> </li> <li> <p>Make system behavior easier to understand</p> </li> <li> <p>Separate code belonging to specific states, simplifying maintenance</p> </li> <li> <p>Control transitions between states based on events or conditions</p> </li> </ul>"},{"location":"patterns/StateMachine/#key-concepts","title":"Key Concepts","text":"<p>State: A distinct mode of operation with specific behaviors.</p> <p>Transition: Condition or event triggering a change from one state to another.</p> <p>State Variable: Variable that stores the current state.</p> <p>State Handler: Code that runs logic based on the current state.</p>"},{"location":"patterns/StateMachine/#how-to","title":"How-To","text":""},{"location":"patterns/StateMachine/#create-a-state-machine-handler","title":"Create a State Machine Handler","text":"<p>First create a function block that encapsulates the logic for managing states and transitions. This basic example handles updating the current state whilst also maintaining a record of the previous state. You can easily improve this by adding additional functionality such as logging or built in validation.</p> <p>--&gt; Add a function block called StateMachineHandler (or whatever you prefer)</p> <p>--&gt; Create two readonly properties (delete Set methods) - CurrentState and LastState</p> <p>--&gt; Create two local variables _currentState and _lastState (exposed via our properties)</p> <p></p>"},{"location":"patterns/StateMachine/#add-a-method-to-update-state","title":"Add a method to update state","text":"<p>Now we add a method that allows us to request a new state.</p> <p>We check that we are not already in the requested state.</p> <p>If we aren't, we store the current state in _lastState and then update our _currentState.</p> <p></p>"},{"location":"patterns/StateMachine/#add-a-case-statement","title":"Add a case statement","text":"<p>Now we need a case statement to isolate each of our different states.</p> <p>Here we are using an Implicitly defined enum for state values and because the underlying value for each of the states is INT, we can easily pass the required state into our UpdateState() method.</p> <p></p>"},{"location":"patterns/StateMachine/#optional-create-state-handler-methods","title":"Optional - Create state handler methods","text":"<p>I also like to create private handler methods for each state. This keeps the case steatement short and easy to read.</p> <p>The methods here are private because we don't want them to be called from outside this POU.</p> <p></p>"},{"location":"patterns/StateMachine/#example","title":"Example","text":"<p>Clone and check out the project in examples folder!</p>"},{"location":"tips/Guard-Clauses/","title":"Guard Clauses and Early Returns","text":"<p>Guard clauses are conditional checks placed at the top of a method or program block. They allow you to exit early when preconditions are not met, instead of nesting your core logic inside multiple IF statements.</p> <p>This can make your code cleaner, flatter, and easier-to-read.</p>"},{"location":"tips/Guard-Clauses/#purpose","title":"Purpose","text":"<p>Use guard clauses to:</p> <ul> <li> <p>Prevent unnecessary nesting</p> </li> <li> <p>Make failure paths explicit</p> </li> <li> <p>Highlight normal/expected execution flow</p> </li> <li> <p>Improve maintainability</p> </li> </ul> <p>They are especially useful when multiple conditions must be satisfied before proceeding with the main logic or operation.</p>"},{"location":"tips/Guard-Clauses/#key-concepts","title":"Key Concepts","text":"<p>Guard Clause: A conditional statement that exits early if a condition isn't met.</p> <p>Early Return: Exiting a method before reaching the end when a precondition fails.</p> <p>Fail Fast: Design principle that stops execution as soon as something goes wrong.</p>"},{"location":"tips/Guard-Clauses/#how-to","title":"How-To","text":"<p>When writing a method or body of logic:</p> <ul> <li> <p>Check for invalid or exit conditions early.</p> </li> <li> <p>Return immediately if a condition fails.</p> </li> <li> <p>Keep the main logic flat and uncluttered.</p> </li> </ul> <p>Here we can see some nested conditional logic around the DoSomething() method. This is fairly easy to read at this point but, as more conditions are added, it can quickly become difficult to read and maintain.</p> <p></p> <p>By inverting conditions and returning early, we can clean up the code and remove the nesting making it easier to follow.</p> <p></p>"},{"location":"tips/Guard-Clauses/#tips","title":"Tips","text":"<p>Use guard clauses in methods with multiple preconditions.</p> <p>Combine with interfaces for clean, testable logic separation.</p> <p>Avoid overuse... if your method needs more than a few guard clauses, it might be doing too much. </p>"},{"location":"tips/Guard-Clauses/#example","title":"Example","text":"<p>Clone and check out the project in examples folder!</p>"}]}